# –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ Telegram Real Estate Bot (–¥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ¬´–ï—Å–ª–∏ –≤—Å—ë —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏¬ª)
# –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–æ–≥–æ —á–∞—Ç–∞ –∏ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞, –≥–æ—Ç–æ–≤–∞—è –∫ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—é
# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Sheets, –±–∞–ª–ª—ã, –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, –∂–∞–ª–æ–±—ã, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è

import logging
import os
from datetime import datetime  # <-- –¥–æ–±–∞–≤—å —ç—Ç–æ!
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder


# Google Sheets (gspread)
import gspread
from google.oauth2.service_account import Credentials

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TOKEN = os.getenv('BOT_TOKEN', '7824358394:AAFQ9Kz4G760C4qU_4NYyRgc9IOfs7qN3NA')  # –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ö—Ä–∞–Ω–∏—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
GOOGLE_CREDENTIALS = os.environ.get("GOOGLE_CREDENTIALS", "/etc/secrets/GOOGLE_CREDENTIALS.json").strip()
print(f"GOOGLE_CREDENTIALS = {GOOGLE_CREDENTIALS}")
SPREADSHEET_NAME = 'astanahunters_template'  # –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü—ã
PRIVATE_CHAT_ID = -1001234567890  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π chat_id –∑–∞–∫—Ä—ã—Ç–æ–≥–æ —á–∞—Ç–∞

# --- Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ ---
SCOPES = [
    'https://www.googleapis.com/auth/spreadsheets',
    'https://www.googleapis.com/auth/drive'
]
creds = Credentials.from_service_account_file(GOOGLE_CREDENTIALS, scopes=SCOPES)
gc = gspread.authorize(creds)
sh = gc.open(SPREADSHEET_NAME)
users_ws = sh.worksheet('users')
print('Sheet –æ—Ç–∫—Ä—ã—Ç!') # –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç
posts_ws = sh.worksheet('posts')
complaints_ws = sh.worksheet('complaints')
score_ws = sh.worksheet('score_history')
leads_ws = sh.worksheet('leads')

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ –∞—É–¥–∏—Ç–∞) ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s [%(levelname)s] %(message)s')
logger = logging.getLogger(__name__)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ---
bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())

# --- –ü–æ–º–æ—â–Ω–∏–∫: –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Google Sheets ---
def get_user_by_id(user_id: int):
    records = users_ws.get_all_records()
    for rec in records:
        if str(rec['ID']) == str(user_id):
            return rec
    return None

# --- –ü–æ–º–æ—â–Ω–∏–∫: –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
def update_user_score(user_id: int, delta: int, reason: str):
    records = users_ws.get_all_records()
    for idx, rec in enumerate(records):
        if str(rec['ID']) == str(user_id):
            new_score = int(rec['–±–∞–ª–ª—ã']) + delta
            users_ws.update_cell(idx+2, 5, new_score)  # –°—Ç–æ–ª–±–µ—Ü –±–∞–ª–ª—ã (5)
            score_ws.append_row([user_id, reason, delta, types.datetime.datetime.now().isoformat(), 'auto'])
            return new_score
    return None

# --- –í–°–¢–ê–í–¨ –°–Æ–î–ê —Ñ—É–Ω–∫—Ü–∏—é ---
async def send_invite_if_verified(user_id: int, status: str):
    if status == "verified":
        invite = await bot.create_chat_invite_link(
            chat_id=PRIVATE_CHAT_ID,  # <- chat_id –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
            member_limit=1
        )
        await bot.send_message(
            user_id,
            f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –í–æ—Ç —Å—Å—ã–ª–∫–∞: {invite.invite_link}\n–°—Å—ã–ª–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑."
        )
    else:
        await bot.send_message(user_id, "–í–∞—à –Ω–æ–º–µ—Ä –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.")

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@dp.message(CommandStart())
async def start_cmd(message: Message):
    user = get_user_by_id(message.from_user.id)
    if user:
        await message.answer('–í—ã —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã. –î–ª—è –ø–æ–º–æ—â–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help')
    else:
        # –í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è ReplyKeyboard!)
        from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
        reply_kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await message.answer(
            '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à —Ä–∞–±–æ—á–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É.',
            reply_markup=reply_kb
        )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ (–≤–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞) ---
@dp.message(F.contact)
async def process_contact(message: Message):
    contact = message.contact
    # TODO: –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–æ–º! –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    users_ws.append_row([
        contact.user_id, contact.first_name, contact.phone_number, 'waiting', 20, datetime.now().isoformat(), ''
    ])
    await message.answer('–°–ø–∞—Å–∏–±–æ, –≤–∞—à –Ω–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.')

# --- –®–∞–±–ª–æ–Ω –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–∞ ---
async def ask_post_info(message: Message):
    # –¢—É—Ç –±—É–¥—É—Ç –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞, —Ä–∞–π–æ–Ω–∞, –≤–≤–æ–¥ —Ñ–æ—Ç–æ –∏ —Ç.–¥.
    # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞: —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç
    await message.answer('–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –æ–±—ä–µ–∫—Ç–∞:')

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –æ–±—ä–µ–∫—Ç–∞ ---
@dp.message(F.photo)
async def handle_photo(message: Message):
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å: –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = get_user_by_id(message.from_user.id)
    if not user or user['—Å—Ç–∞—Ç—É—Å'] != 'verified':
        await message.answer('–ü—É–±–ª–∏–∫–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º.')
        return
    # –ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ (–±–µ–∑ –Ω–æ–º–µ—Ä–∞ –∏ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞):')
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (—Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å FSM, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    # ...

# --- –ü—Ä–æ—Å–º–æ—Ç—Ä ‚Äú–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç‚Äù ---
@dp.message(Command('cabinet'))
async def show_cabinet(message: Message):
    user = get_user_by_id(message.from_user.id)
    if user:
        await message.answer(
            f'üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n–ë–∞–ª–ª—ã: <b>{user["–±–∞–ª–ª—ã"]}</b>\n–°—Ç–∞—Ç—É—Å: {user["—Å—Ç–∞—Ç—É—Å"]}\n–ñ–∞–ª–æ–±—ã: {user["–∂–∞–ª–æ–±—ã"]}'
        )
    else:
        await message.answer('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.')

# --- –í–°–¢–ê–í–¨ –°–Æ–î–ê —Ö–µ–Ω–¥–ª–µ—Ä ---
@dp.message(Command("invite"))
async def invite_user(message: Message):
    user = get_user_by_id(message.from_user.id)
    if user:
        await send_invite_if_verified(message.from_user.id, user["—Å—Ç–∞—Ç—É—Å"])
    else:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")


# --- –û—à–∏–±–∫–∞: –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ---
#@dp.errors()
#async def error_handler(update, exception):
#    logger.error(f"–û—à–∏–±–∫–∞: {exception} | update: {update}")
#    if isinstance(update, types.Message):
#        await update.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ –∑–Ω–∞–µ—Ç!")
#    return True

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())

"""
–í–ê–ñ–ù–û: –≠—Ç–æ skeleton ‚Äî –æ—Å–Ω–æ–≤–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã. –í—Å–µ –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–∞ –∏ —Å–ª–æ–∂–Ω—ã–µ FSM-–º–µ—Ö–∞–Ω–∏–∫–∏ –º–æ–∂–Ω–æ –Ω–∞—Ä–∞—â–∏–≤–∞—Ç—å —à–∞–≥ –∑–∞ —à–∞–≥–æ–º. –ö–æ–¥ –ª–µ–≥–∫–æ —Ä–∞—Å—à–∏—Ä—è–µ—Ç—Å—è: –¥–æ–±–∞–≤–ª—è–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ—Å—Ç–æ–≤, –∫–Ω–æ–ø–∫–∏, –±–∞–ª–ª—ã, –∂–∞–ª–æ–±—ã –∏ —Ç.–¥. –í—Å–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (Google Sheets) ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ª–∏—Å—Ç—ã, –∫–∞–∫ –æ–±—Å—É–∂–¥–∞–ª–∏.

‚Ä¢ –î–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –ø–æ—Å—Ç–æ–≤: –±–æ—Ç –ø—É–±–ª–∏–∫—É–µ—Ç –æ–±—ä–µ–∫—Ç—ã —Ç–æ–ª—å–∫–æ —Å–∞–º (–±–µ–∑ –∫–Ω–æ–ø–æ–∫ forward/reply), –º–æ–∂–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫—É, –¥–µ–ª–∞—è —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º—ã–º–∏.
‚Ä¢ –î–ª—è Google Sheets ‚Äî –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ gspread.
‚Ä¢ –î–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ, FSM, –º—É–ª—å—Ç–∏—à–∞–≥–æ–≤—ã—Ö —Ñ–æ—Ä–º ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º aiogram FSMContext (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è, –¥–æ–±–∞–≤–ª—é –ø—Ä–∏–º–µ—Ä –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É).
‚Ä¢ –î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (–ø–æ —Å—Å—ã–ª–∫–µ –Ω–∞ –∫–∞–Ω–∞–ª).
‚Ä¢ –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è —Ñ–∏–∫—Å–∏—Ä—É—é—Ç—Å—è (–±–∞–ª–ª—ã, –∂–∞–ª–æ–±—ã, –∏—Å—Ç–æ—Ä–∏–∏).
"""
# === OLD BLOCK (–ø–µ—Ä–µ–Ω–µ—Å—ë–Ω 2025-06-08) ===



# === OLD BLOCK (–ø–µ—Ä–µ–Ω–µ—Å—ë–Ω 2025-06-08) ===


