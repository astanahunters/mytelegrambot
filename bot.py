# –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ Telegram Real Estate Bot (–¥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ¬´–ï—Å–ª–∏ –≤—Å—ë —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏¬ª)
# –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–æ–≥–æ —á–∞—Ç–∞ –∏ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞, –≥–æ—Ç–æ–≤–∞—è –∫ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—é
# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Sheets, –±–∞–ª–ª—ã, –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, –∂–∞–ª–æ–±—ã, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è

import logging
import os
from datetime import datetime
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart, Command
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.fsm.storage.memory import MemoryStorage

import gspread
from google.oauth2.service_account import Credentials

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TOKEN = os.getenv('BOT_TOKEN', '7824358394:AAFQ9Kz4G760C4qU_4NYyRgc9IOfs7qN3NA')
GOOGLE_CREDENTIALS = os.environ.get("GOOGLE_CREDENTIALS", "/etc/secrets/GOOGLE_CREDENTIALS.json").strip()
print(f"GOOGLE_CREDENTIALS = {GOOGLE_CREDENTIALS}")
SPREADSHEET_NAME = 'astanahunters_template'
PRIVATE_CHAT_ID = -1002635314764  # –ó–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç
CHANNEL_ID = -1002643399672       # <-- —Å—é–¥–∞ –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –ø–æ—Å—Ç—ã
INVITE_LINK = "–¢–µ–ø–µ—Ä—å –≤—Ö–æ–¥ –ø–ª–∞—Ç–Ω—ã–π! –ü–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω—É –õ–° @astanahunters"
YOUR_ADMIN_ID = 7796929428

# --- Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ ---
SCOPES = [
    'https://www.googleapis.com/auth/spreadsheets',
    'https://www.googleapis.com/auth/drive'
]
creds = Credentials.from_service_account_file(GOOGLE_CREDENTIALS, scopes=SCOPES)
gc = gspread.authorize(creds)
sh = gc.open(SPREADSHEET_NAME)
users_ws = sh.worksheet('users')
print('Sheet –æ—Ç–∫—Ä—ã—Ç!')
posts_ws = sh.worksheet('posts')
complaints_ws = sh.worksheet('complaints')
score_ws = sh.worksheet('score_history')
leads_ws = sh.worksheet('leads')

logging.basicConfig(level=logging.INFO, format='%(asctime)s [%(levelname)s] %(message)s')
logger = logging.getLogger(__name__)

bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞: –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∏—à–ª–∞ –∏–∑ –ª–∏—á–∫–∏? ---
def is_private(message: Message) -> bool:
    return message.chat.type == 'private'

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def get_user_by_id(user_id: int):
    records = users_ws.get_all_records()
    for rec in records:
        if str(rec['ID']) == str(user_id):
            return rec
    return None

def update_user_score(user_id: int, delta: int, reason: str):
    records = users_ws.get_all_records()
    for idx, rec in enumerate(records):
        if str(rec['ID']) == str(user_id):
            new_score = int(rec['–±–∞–ª–ª—ã']) + delta
            users_ws.update_cell(idx + 2, 5, new_score)  # –°—Ç–æ–ª–±–µ—Ü –±–∞–ª–ª—ã (5)
            score_ws.append_row([user_id, reason, delta, datetime.now().isoformat(), 'auto'])
            return new_score
    return None

# –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–±—Ü–∞ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É (–¥–ª—è invited)
def get_col_idx_by_name(ws, col_name):
    headers = ws.row_values(1)
    for idx, name in enumerate(headers):
        if name.strip().lower() == col_name.strip().lower():
            return idx + 1
    return None

# --- –ê–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π verified –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º ---
async def auto_invite_verified_users():
    records = users_ws.get_all_records()
    invited_col = get_col_idx_by_name(users_ws, 'invited')
    for idx, rec in enumerate(records):
        if rec['—Å—Ç–∞—Ç—É—Å'].strip().lower() == 'verified' and not rec.get('invited'):
            try:
                await bot.send_message(rec['ID'], f"‚úÖ –í—ã –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã!\n–í—Å—Ç—É–ø–∏—Ç–µ –≤ –∑–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç: {INVITE_LINK}")
                users_ws.update_cell(idx + 2, invited_col, 'yes')
                logging.info(f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {rec['ID']}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è {rec['ID']}: {e}")

# --- –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –∏ –ª—é–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ/–∫–∞–Ω–∞–ª–µ ---
@dp.message(F.text.startswith('/'))
async def delete_commands_in_group(message: Message):
    if not is_private(message):
        try:
            await message.delete()
        except Exception:
            pass

@dp.message(F.text)
async def delete_messages_in_group(message: Message):
    if not is_private(message):
        try:
            await message.delete()
        except Exception:
            pass

@dp.message(F.photo)
async def delete_photos_in_group(message: Message):
    if not is_private(message):
        try:
            await message.delete()
        except Exception:
            pass

# --- –ö–æ–º–∞–Ω–¥—ã (–æ—Ç–≤–µ—á–∞—é—Ç —Ç–æ–ª—å–∫–æ –≤ –õ–°) ---
@dp.message(CommandStart())
async def start_cmd(message: Message):
    if not is_private(message):
        return
    try:
        user = get_user_by_id(message.from_user.id)
        if user:
            if user['—Å—Ç–∞—Ç—É—Å'].strip().lower() == 'verified':
                await message.answer(
                    f'‚úÖ –í—ã –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã! –í–æ—Ç —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∑–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç:\n{INVITE_LINK}'
                )
            else:
                await message.answer('–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–æ–º–µ—Ä. –û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.')
        else:
            reply_kb = ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]],
                resize_keyboard=True,
                one_time_keyboard=True
            )
            await message.answer(
                '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à —Ä–∞–±–æ—á–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É.',
                reply_markup=reply_kb
            )
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

@dp.message(F.contact)
async def process_contact(message: Message):
    if not is_private(message):
        return
    contact = message.contact
    users_ws.append_row([
        contact.user_id, contact.first_name, contact.phone_number, 'waiting', 20, datetime.now().isoformat(), '', ''
    ])
    await message.answer('–°–ø–∞—Å–∏–±–æ, –≤–∞—à –Ω–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.')

@dp.message(Command('rules'))
async def send_rules(message: types.Message):
    if not is_private(message):
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ –ª–∏—á–∫–µ —Å –±–æ—Ç–æ–º.")
        return
    rules_text = "–¢—É—Ç —Ç–µ–∫—Å—Ç –ø—Ä–∞–≤–∏–ª...\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ —Å–æ–≥–ª–∞—Å–Ω—ã:"
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –û–∑–Ω–∞–∫–æ–º–∏–ª—Å—è", callback_data="accept_rules")]
        ]
    )
    await message.answer(rules_text, reply_markup=keyboard)

@dp.callback_query(F.data == "accept_rules")
async def process_accept_rules(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    # TODO: –°–æ—Ö—Ä–∞–Ω–∏ –≤ Google Sheets –∏–ª–∏ –±–∞–∑–µ, —á—Ç–æ user_id –æ–∑–Ω–∞–∫–æ–º–∏–ª—Å—è
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer("–°–ø–∞—Å–∏–±–æ! –í—ã –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏ –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É.")

# --- –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ñ–æ—Ç–æ –æ–±—ä–µ–∫—Ç–∞: —Ç–æ–ª—å–∫–æ –≤ –õ–°! –ü—É–±–ª–∏–∫—É–µ—Ç—Å—è –≤ –∫–∞–Ω–∞–ª ---
@dp.message(F.photo)
async def handle_photo(message: Message):
    if not is_private(message):
        return
    user = get_user_by_id(message.from_user.id)
    if not user or user['—Å—Ç–∞—Ç—É—Å'].strip().lower() != 'verified':
        await message.answer('–ü—É–±–ª–∏–∫–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º.')
        return
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ (–±–µ–∑ –Ω–æ–º–µ—Ä–∞ –∏ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞):')
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å FSM: –æ–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª

    # –ü—Ä–∏–º–µ—Ä –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ñ–æ—Ç–æ –≤ –∫–∞–Ω–∞–ª (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è FSM –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è):
    # await bot.send_photo(CHANNEL_ID, photo=message.photo[-1].file_id, caption="–û–ø–∏—Å–∞–Ω–∏–µ")

@dp.message(Command('cabinet'))
async def show_cabinet(message: Message):
    if not is_private(message):
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ –ª–∏—á–∫–µ —Å –±–æ—Ç–æ–º.")
        return
    user = get_user_by_id(message.from_user.id)
    if user:
        await message.answer(
            f'üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n–ë–∞–ª–ª—ã: <b>{user["–±–∞–ª–ª—ã"]}</b>\n–°—Ç–∞—Ç—É—Å: {user["—Å—Ç–∞—Ç—É—Å"]}\n–ñ–∞–ª–æ–±—ã: {user.get("–∂–∞–ª–æ–±—ã","-")}'
        )
    else:
        await message.answer('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.')

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–π —Å—Å—ã–ª–∫–∏
async def generate_one_time_invite():
    try:
        invite_link = await bot.create_chat_invite_link(
            chat_id=PRIVATE_CHAT_ID,
            member_limit=1
        )
        return invite_link.invite_link
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏: {e}")
        return None

@dp.message(Command('approve'))
async def approve_user(message: types.Message):
    if not is_private(message):
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ –ª–∏—á–∫–µ —Å –±–æ—Ç–æ–º.")
        return
    if message.from_user.id != YOUR_ADMIN_ID:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    try:
        user_id = int(message.text.split()[1])
        user = get_user_by_id(user_id)
        if user and user['—Å—Ç–∞—Ç—É—Å'].strip().lower() == 'verified':
            invite_link = await generate_one_time_invite()
            if invite_link:
                await bot.send_message(user_id, f"‚úÖ –í—ã –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã!\n–í—Å—Ç—É–ø–∏—Ç–µ –≤ –∑–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç: {invite_link}")
                await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –ø—Ä–∏–≥–ª–∞—à—ë–Ω –≤ —á–∞—Ç.")
            else:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É.")
        else:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")

@dp.message(Command('autoinvite'))
async def autoinvite_command(message: types.Message):
    if not is_private(message):
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ –ª–∏—á–∫–µ —Å –±–æ—Ç–æ–º.")
        return
    if message.from_user.id != YOUR_ADMIN_ID:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    await auto_invite_verified_users()
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())


"""
–í–ê–ñ–ù–û: –≠—Ç–æ skeleton ‚Äî –æ—Å–Ω–æ–≤–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã. –í—Å–µ –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–∞ –∏ —Å–ª–æ–∂–Ω—ã–µ FSM-–º–µ—Ö–∞–Ω–∏–∫–∏ –º–æ–∂–Ω–æ –Ω–∞—Ä–∞—â–∏–≤–∞—Ç—å —à–∞–≥ –∑–∞ —à–∞–≥–æ–º. –ö–æ–¥ –ª–µ–≥–∫–æ —Ä–∞—Å—à–∏—Ä—è–µ—Ç—Å—è: –¥–æ–±–∞–≤–ª—è–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ—Å—Ç–æ–≤, –∫–Ω–æ–ø–∫–∏, –±–∞–ª–ª—ã, –∂–∞–ª–æ–±—ã –∏ —Ç.–¥. –í—Å–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (Google Sheets) ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ª–∏—Å—Ç—ã, –∫–∞–∫ –æ–±—Å—É–∂–¥–∞–ª–∏.

‚Ä¢ –î–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –ø–æ—Å—Ç–æ–≤: –±–æ—Ç –ø—É–±–ª–∏–∫—É–µ—Ç –æ–±—ä–µ–∫—Ç—ã —Ç–æ–ª—å–∫–æ —Å–∞–º (–±–µ–∑ –∫–Ω–æ–ø–æ–∫ forward/reply), –º–æ–∂–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫—É, –¥–µ–ª–∞—è —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º—ã–º–∏.
‚Ä¢ –î–ª—è Google Sheets ‚Äî –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ gspread.
‚Ä¢ –î–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ, FSM, –º—É–ª—å—Ç–∏—à–∞–≥–æ–≤—ã—Ö —Ñ–æ—Ä–º ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º aiogram FSMContext (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è, –¥–æ–±–∞–≤–ª—é –ø—Ä–∏–º–µ—Ä –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É).
‚Ä¢ –î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (–ø–æ —Å—Å—ã–ª–∫–µ –Ω–∞ –∫–∞–Ω–∞–ª).
‚Ä¢ –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è —Ñ–∏–∫—Å–∏—Ä—É—é—Ç—Å—è (–±–∞–ª–ª—ã, –∂–∞–ª–æ–±—ã, –∏—Å—Ç–æ—Ä–∏–∏).
"""
# === OLD BLOCK (–ø–µ—Ä–µ–Ω–µ—Å—ë–Ω 2025-06-08) ===



# === OLD BLOCK (–ø–µ—Ä–µ–Ω–µ—Å—ë–Ω 2025-06-08) ===


