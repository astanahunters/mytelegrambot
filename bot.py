# main.py
import os
import sys
import logging
import asyncio
from datetime import datetime
from pathlib import Path
import contextlib

from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart, Command
from aiogram.types import (
    Message, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton, ChatMemberUpdated
)
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

import gspread
from google.oauth2.service_account import Credentials

# --- auto_cleaner integration ---
import auto_cleaner

# --- 1. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
PROJECT_DIR       = Path(__file__).resolve().parent
BACKUP_DIR        = PROJECT_DIR / "backups"
BACKUP_DIR.mkdir(exist_ok=True)

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s'
)
logger = logging.getLogger(__name__)

# ENV loader
def require_env(name: str) -> str:
    value = os.getenv(name)
    if not value:
        logger.error(f"Environment variable '{name}' is not set.")
        sys.exit(1)
    return value

# –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN              = require_env('BOT_TOKEN')
GOOGLE_CREDENTIALS = require_env('GOOGLE_CREDENTIALS')
SPREADSHEET_NAME   = require_env('SPREADSHEET_NAME')

# –ß–∞—Ç—ã –∏ –∞–¥–º–∏–Ω —Å –¥–µ—Ñ–æ–ª—Ç–∞–º–∏
DEFAULT_PRIVATE_CHAT_ID = -1002635314764
DEFAULT_CHANNEL_ID      = -1002643399672
DEFAULT_YOUR_ADMIN_ID   = 7796929428
PRIVATE_CHAT_ID = int(os.getenv('PRIVATE_CHAT_ID', str(DEFAULT_PRIVATE_CHAT_ID)))
CHANNEL_ID      = int(os.getenv('CHANNEL_ID', str(DEFAULT_CHANNEL_ID)))
YOUR_ADMIN_ID   = int(os.getenv('YOUR_ADMIN_ID', str(DEFAULT_YOUR_ADMIN_ID)))
CONFIRM_TIMEOUT = int(os.getenv('CONFIRM_TIMEOUT', '3600'))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())

# --- 2. Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ ---
SCOPES = ['https://www.googleapis.com/auth/spreadsheets', 'https://www.googleapis.com/auth/drive']
try:
    creds = Credentials.from_service_account_file(GOOGLE_CREDENTIALS, scopes=SCOPES)
    gc = gspread.authorize(creds)
    sh = gc.open(SPREADSHEET_NAME)
    users_ws      = sh.worksheet('users')
    posts_ws      = sh.worksheet('posts')
    complaints_ws = sh.worksheet('complaints')
    score_ws      = sh.worksheet('score_history')
    leads_ws      = sh.worksheet('leads')
    logger.info('‚úÖ Google Sheet –æ—Ç–∫—Ä—ã—Ç!')
except Exception as e:
    logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google Sheets: %s', e)
    sys.exit(1)

# --- 3. –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è Google Sheets ---
def get_user_by_id(user_id: int):
    for rec in users_ws.get_all_records():
        if str(rec.get('ID')) == str(user_id):
            return rec
    return None


def get_col_idx_by_name(ws, col_name: str):
    for idx, name in enumerate(ws.row_values(1), start=1):
        if name.strip().lower() == col_name.strip().lower():
            return idx
    return None


def update_user_score(user_id: int, delta: int, reason: str):
    for row_idx, rec in enumerate(users_ws.get_all_records(), start=2):
        if str(rec.get('ID')) == str(user_id):
            col_bal = get_col_idx_by_name(users_ws, '–±–∞–ª–ª—ã')
            new = int(rec.get('–±–∞–ª–ª—ã', 0)) + delta
            users_ws.update_cell(row_idx, col_bal, new)
            score_ws.append_row([user_id, reason, delta, datetime.utcnow().isoformat(), 'auto'])
            return new
    return None

# --- 4. –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–π —Å—Å—ã–ª–∫–∏ ---
async def send_one_time_invite_to_user(user_id: int):
    try:
        link = (await bot.create_chat_invite_link(chat_id=PRIVATE_CHAT_ID, member_limit=1)).invite_link
        await bot.send_message(user_id, f"‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞! –í—Å—Ç—É–ø–∞–π—Ç–µ: {link}")
    except Exception:
        await bot.send_message(user_id, (
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É. "
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @astanahunters ‚Äî –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–ª–∞—Ç–Ω–æ–µ."
        ))

# --- 5. FSM –¥–ª—è –ø–æ—Å—Ç–æ–≤ ---
class PostStates(StatesGroup):
    waiting_photo = State()
    waiting_desc  = State()

# --- 6. FSM –¥–ª—è –∂–∞–ª–æ–± ---
class ComplainStates(StatesGroup):
    target     = State()
    evidence   = State()
    description= State()

# --- 7. FSM –¥–ª—è —Å–¥–µ–ª–æ–∫ ---
class DealStates(StatesGroup):
    partner = State()
    terms   = State()

# --- 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—á–∫–∏ ---
def is_private(m: Message) -> bool:
    return m.chat.type == 'private'

# --- 9. –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ö–æ–¥–∞ –∏–∑ —á–∞—Ç–∞ ---
@dp.chat_member()
async def on_chat_member_update(event: ChatMemberUpdated):
    if event.chat.id != PRIVATE_CHAT_ID:
        return
    old, new = event.old_chat_member.status, event.new_chat_member.status
    user = event.new_chat_member.user
    if old in ('member','administrator','creator') and new in ('left','kicked'):
        # –æ–±–Ω–æ–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ —Å—Ç–∞—Ç—É—Å waiting
        try:
            row = users_ws.find(str(user.id)).row
            col = get_col_idx_by_name(users_ws, '—Å—Ç–∞—Ç—É—Å')
            users_ws.update_cell(row, col, 'waiting')
        except:
            pass
        # —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await bot.send_message(user.id, "–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å astanahunters?")

# --- 10. –•–µ–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥ ---
@dp.message(CommandStart())
async def start_cmd(message: Message):
    if not is_private(message): return
    user = get_user_by_id(message.from_user.id)
    if user:
        status = user.get('—Å—Ç–∞—Ç—É—Å','').strip().lower()
        if status == 'verified':
            await send_one_time_invite_to_user(message.from_user.id)
        elif status == 'waiting':
            await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ —á–∞—Ç–∞ ‚Äî –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @astanahunters.")
        else:
            await message.answer("–ñ–¥–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.")
    else:
        kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üì≤ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]],
            resize_keyboard=True, one_time_keyboard=True
        )
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=kb)

@dp.message(F.content_type == 'contact')
async def process_contact(message: Message):
    if not is_private(message): return
    c = message.contact
    fio = f"{c.first_name or ''} {c.last_name or ''}".strip()
    users_ws.append_row([c.user_id, fio, c.phone_number, 'waiting', 0,
                         datetime.utcnow().isoformat(), '', 'no', 'no'])
    await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à –Ω–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.")

@dp.message(Command('rules'))
async def send_rules(message: Message):
    if not is_private(message): return await message.answer("‚ö†Ô∏è –í –õ–° –±–æ—Ç–∞.")
    kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚úÖ –û–∑–Ω–∞–∫–æ–º–∏–ª—Å—è", callback_data="accept_rules")
    )
    await message.answer("üìú –ü—Ä–∞–≤–∏–ª–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞...", reply_markup=kb)

@dp.callback_query(F.data=='accept_rules')
async def accept_rules(cb: types.CallbackQuery):
    await cb.message.edit_reply_markup(None)
    await send_one_time_invite_to_user(cb.from_user.id)
    row = users_ws.find(str(cb.from_user.id)).row
    users_ws.update_cell(row, get_col_idx_by_name(users_ws,'–û–∑–Ω–∞–∫–æ–º–∏–ª—Å—è'), 'yes')
    users_ws.update_cell(row, get_col_idx_by_name(users_ws,'invited'), 'yes')

@dp.message(F.chat.id==PRIVATE_CHAT_ID)
async def delete_in_private(msg: Message):
    with contextlib.suppress(Exception): await msg.delete()

# /newpost handled elsewhere...

# --- /complain ---
@dp.message(Command('complain'))
async def cmd_complain(message: Message):
    if not is_private(message): return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ @username —É—á–∞—Å—Ç–Ω–∏–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –∂–∞–ª—É–µ—Ç–µ—Å—å:")
    await message.delete()
    await message.answer("–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–∏–Ω—è—Ç–∞.")
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ (—Ñ–æ—Ç–æ, —Å–∫—Ä–∏–Ω—à–æ—Ç—ã, –ø–µ—Ä–µ–ø–∏—Å–∫—É):")
    await dp.current_state().set_state(ComplainStates.evidence)

@dp.message(ComplainStates.evidence, F.any())
async def complain_evidence(message: Message, state: FSMContext):
    await state.update_data(evidence=message)
    await message.answer("–û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é:")
    await state.set_state(ComplainStates.description)

@dp.message(ComplainStates.description)
async def complain_desc(message: Message, state: FSMContext):
    data = await state.get_data()
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É complaints
    complaints_ws.append_row([
        message.from_user.id,
        data.get('evidence').message_id,
        message.text,
        datetime.utcnow().isoformat()
    ])
    await message.answer("–°–ø–∞—Å–∏–±–æ, –≤–∞—à–∞ –∂–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
    await state.clear()

# --- /deal ---
@dp.message(Command('deal'))
async def cmd_deal(message: Message):
    if not is_private(message): return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ —Å–¥–µ–ª–∫–∏:")
    await dp.current_state().set_state(DealStates.partner)

@dp.message(DealStates.partner)
async def deal_partner(message: Message, state: FSMContext):
    await state.update_data(partner=message.text)
    await message.answer("–û–ø–∏—à–∏—Ç–µ –¥–æ–≥–æ–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç—å (–∫–æ–º–∏—Å—Å–∏—è, –ø–æ–∫–∞–∑ –∏ —Ç.–¥.):")
    await state.set_state(DealStates.terms)

@dp.message(DealStates.terms)
async def deal_terms(message: Message, state: FSMContext):
    data = await state.get_data()
    leads_ws.append_row([
        message.from_user.id,
        data.get('partner'),
        message.text,
        datetime.utcnow().isoformat()
    ])
    await message.answer("–°–¥–µ–ª–∫–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞.")
    await state.clear()

# --- /help ---
@dp.message(Command('help'))
async def cmd_help(message: Message):
    text = (
        "/start ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –≤—Ö–æ–¥\n"
        "/rules ‚Äî –ø—Ä–∞–≤–∏–ª–∞ –∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ\n"
        "/complain ‚Äî –ø–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É –∞–Ω–æ–Ω–∏–º–Ω–æ\n"
        "/deal ‚Äî –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç—å\n"
        "/cabinet ‚Äî –≤–∞—à –∫–∞–±–∏–Ω–µ—Ç –∏ –±–∞–ª–ª—ã\n"
        "/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞"
    )
    await message.answer(text)

# --- 11. –ó–∞–ø—É—Å–∫ ---
if __name__ == '__main__':
    logger.info("üöÄ Bot started")
    asyncio.run(dp.start_polling(bot))
