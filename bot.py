# –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ Telegram Real Estate Bot (–¥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ¬´–ï—Å–ª–∏ –≤—Å—ë —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏¬ª)
# –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–æ–≥–æ —á–∞—Ç–∞ –∏ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞, –≥–æ—Ç–æ–≤–∞—è –∫ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—é
# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Sheets, –±–∞–ª–ª—ã, –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, –∂–∞–ª–æ–±—ã, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è

# main.py
import os
import logging
import asyncio
from datetime import datetime
from pathlib import Path
import contextlib

from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart, Command
from aiogram.types import (
    Message, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

import gspread
from google.oauth2.service_account import Credentials

# --- auto_cleaner integration ---
import auto_cleaner

# --- 1. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
PROJECT_DIR       = Path(__file__).resolve().parent
MAIN_FILE         = PROJECT_DIR / "main.py"
CHANGELOG         = PROJECT_DIR / "changelog.md"
BACKUP_DIR        = PROJECT_DIR / "backups"; BACKUP_DIR.mkdir(exist_ok=True)

# –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
TOKEN             = os.getenv('BOT_TOKEN')
GOOGLE_CREDENTIALS= os.getenv('GOOGLE_CREDENTIALS').strip()
SPREADSHEET_NAME  = os.getenv('SPREADSHEET_NAME')
PRIVATE_CHAT_ID   = int(os.getenv('PRIVATE_CHAT_ID'))
CHANNEL_ID        = int(os.getenv('CHANNEL_ID'))
YOUR_ADMIN_ID     = int(os.getenv('YOUR_ADMIN_ID'))

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ-—á–∏—Å—Ç–∫–∏
CLEANER_ADMIN_ID  = YOUR_ADMIN_ID  # –µ–¥–∏–Ω—ã–π –∞–¥–º–∏–Ω
CONFIRM_TIMEOUT   = int(os.getenv('CONFIRM_TIMEOUT', 3600))

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s'
)
logger = logging.getLogger(__name__)

bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())

# --- 2. Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ ---
SCOPES = [
    'https://www.googleapis.com/auth/spreadsheets',
    'https://www.googleapis.com/auth/drive'
]
creds = Credentials.from_service_account_file(GOOGLE_CREDENTIALS, scopes=SCOPES)
gc = gspread.authorize(creds)
sh = gc.open(SPREADSHEET_NAME)
users_ws      = sh.worksheet('users')
posts_ws      = sh.worksheet('posts')
complaints_ws = sh.worksheet('complaints')
score_ws      = sh.worksheet('score_history')
leads_ws      = sh.worksheet('leads')
logger.info('‚úÖ Google Sheet –æ—Ç–∫—Ä—ã—Ç!')

# --- 3. –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã ---
def get_user_by_id(user_id: int):
    for rec in users_ws.get_all_records():
        if str(rec.get('ID') or rec.get('user_id')) == str(user_id):
            return rec
    return None


def get_col_idx_by_name(ws, col_name: str):
    headers = ws.row_values(1)
    for idx, name in enumerate(headers, start=1):
        if name.strip().lower() == col_name.strip().lower():
            return idx
    return None


def update_user_score(user_id: int, delta: int, reason: str):
    records = users_ws.get_all_records()
    for idx, rec in enumerate(records, start=2):
        if str(rec.get('ID') or rec.get('user_id')) == str(user_id):
            col = get_col_idx_by_name(users_ws, '–±–∞–ª–ª—ã') or get_col_idx_by_name(users_ws, 'score')
            new = int(rec.get('–±–∞–ª–ª—ã', rec.get('score', 0))) + delta
            users_ws.update_cell(idx, col, new)
            score_ws.append_row([user_id, reason, delta, datetime.utcnow().isoformat(), 'auto'])
            return new
    return None


async def auto_invite_verified_users():
    records = users_ws.get_all_records()
    inv_col = get_col_idx_by_name(users_ws, 'invited')
    status_col = get_col_idx_by_name(users_ws, 'status') or get_col_idx_by_name(users_ws, 'verified')
    for i, rec in enumerate(records, start=2):
        if rec.get('status','').strip().lower()=='verified' and rec.get('invited','').strip().lower()!='yes':
            link = await bot.create_chat_invite_link(chat_id=PRIVATE_CHAT_ID, member_limit=1)
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: f-string –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
            await bot.send_message(rec['ID'], f"‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞! –í—Å—Ç—É–ø–∞–π—Ç–µ: {link.invite_link}")
            users_ws.update_cell(i, inv_col, 'yes')

# --- 4. FSM –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π ---
class PostStates(StatesGroup):
    waiting_photo = State()
    waiting_desc  = State()

# --- 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –õ–° ---
def is_private(m: Message) -> bool:
    return m.chat.type == 'private'

# --- 6. –•–µ–Ω–¥–ª–µ—Ä—ã ---
@dp.message(CommandStart())
async def start_cmd(message: Message):
    if not is_private(message): return
    user = get_user_by_id(message.from_user.id)
    if user:
        if user.get('status','').strip().lower()=='verified':
            link = await bot.create_chat_invite_link(chat_id=PRIVATE_CHAT_ID, member_limit=1)
            await message.answer(f"‚úÖ –í—ã –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã!\n{link.invite_link}")
        else:
            await message.answer("–ñ–¥–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.")
    else:
        kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        kb.add(KeyboardButton("üì≤ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True))
        await message.answer("–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º:", reply_markup=kb)


@dp.message(F.content_type=='contact')
async def process_contact(message: Message):
    if not is_private(message): return
    c = message.contact
    users_ws.append_row([c.user_id, c.phone_number, 'waiting', 'no', 0, datetime.utcnow().isoformat()])
    await message.answer("–ù–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.")


@dp.message(Command('rules'))
async def send_rules(message: Message):
    if not is_private(message): return await message.answer("–ö–æ–º–∞–Ω–¥–∞ –≤ –õ–°.")
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("‚úÖ –û–∑–Ω–∞–∫–æ–º–∏–ª—Å—è", callback_data="accept_rules"))
    await message.answer("üìú –ü—Ä–∞–≤–∏–ª–∞...", reply_markup=kb)


@dp.callback_query(F.data=="accept_rules")
async def accept_rules(cb: types.CallbackQuery):
    await cb.message.edit_reply_markup(None)
    link = await bot.create_chat_invite_link(chat_id=PRIVATE_CHAT_ID, member_limit=1)
    idx = users_ws.find(str(cb.from_user.id)).row
    users_ws.update_cell(idx, get_col_idx_by_name(users_ws,'invited'), 'yes')
    await cb.message.answer(f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n{link.invite_link}")


@dp.message(F.chat.id==PRIVATE_CHAT_ID)
async def delete_in_private_chat(msg: Message):
    with contextlib.suppress(Exception):
        await msg.delete()


@dp.message(Command('newpost'))
async def cmd_newpost(msg: Message, state: FSMContext):
    if not is_private(msg): return
    u = get_user_by_id(msg.from_user.id)
    if not u or u.get('status','').strip().lower()!='verified':
        return await msg.answer("–¢–æ–ª—å–∫–æ –¥–ª—è verified.")
    await msg.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ.")
    await state.set_state(PostStates.waiting_photo)


@dp.message(PostStates.waiting_photo, F.photo)
async def got_photo(msg: Message, state: FSMContext):
    await state.update_data(photo=msg.photo[-1].file_id)
    await msg.answer("–¢–µ–ø–µ—Ä—å –æ–ø–∏—Å–∞–Ω–∏–µ:")
    await state.set_state(PostStates.waiting_desc)


@dp.message(PostStates.waiting_desc)
async def got_desc(msg: Message, state: FSMContext):
    data = await state.get_data()
    await bot.send_photo(chat_id=CHANNEL_ID, photo=data['photo'], caption=msg.text)
    posts_ws.append_row([msg.from_user.id, msg.text, datetime.utcnow().isoformat()])
    update_user_score(msg.from_user.id, +10, 'post')
    await msg.answer("–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ.")
    await state.clear()


@dp.message(Command('cabinet'))
async def show_cabinet(msg: Message):
    if not is_private(msg): return
    u = get_user_by_id(msg.from_user.id)
    if not u: return await msg.answer("–ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
    score = u.get('score') or u.get('–±–∞–ª–ª—ã',0)
    text = f"üë§ –†–µ–π—Ç–∏–Ω–≥: <b>{score}</b>\n"
    await msg.answer(text)


@dp.message(Command('approve'))
async def approve_user(message: Message):
    if not is_private(message): return
    if message.from_user.id!=YOUR_ADMIN_ID: return
    parts=message.text.split()
    if len(parts)!=2: return await message.answer("/approve <id>")
    uid=int(parts[1]); row=users_ws.find(str(uid)).row
    users_ws.update_cell(row, get_col_idx_by_name(users_ws,'status'),'verified')
    link = await bot.create_chat_invite_link(chat_id=PRIVATE_CHAT_ID, member_limit=1)
    users_ws.update_cell(row, get_col_idx_by_name(users_ws,'invited'),'yes')
    await bot.send_message(uid, f"‚úÖ Verified!\n{link.invite_link}")
    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –ø—Ä–∏–≥–ª–∞—à—ë–Ω.")


@dp.message(Command('autoinvite'))
async def autoinvite_command(message: Message):
    if not is_private(message): return
    if message.from_user.id!=YOUR_ADMIN_ID: return
    await auto_invite_verified_users()
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


@dp.message(Command('clean'))
async def clean_cmd(message: Message):
    if message.from_user.id!=YOUR_ADMIN_ID: return
    await message.answer("–ó–∞–ø—É—Å–∫–∞—é –∞–≤—Ç–æ-—á–∏—Å—Ç–∫—É...")
    await auto_cleaner.main()
    await message.answer("Auto-cleaner –∑–∞–≤–µ—Ä—à—ë–Ω.")

# --- 7. –°—Ç–∞—Ä—Ç –ø–æ–ª–ª–∏–Ω–≥–∞ –∏ backup-trigger ---
if __name__=='__main__':
    logger.info("üöÄ Bot started")
    asyncio.run(dp.start_polling(bot))


"""
–í–ê–ñ–ù–û: –≠—Ç–æ skeleton ‚Äî –æ—Å–Ω–æ–≤–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã. –í—Å–µ –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–∞ –∏ —Å–ª–æ–∂–Ω—ã–µ FSM-–º–µ—Ö–∞–Ω–∏–∫–∏ –º–æ–∂–Ω–æ –Ω–∞—Ä–∞—â–∏–≤–∞—Ç—å —à–∞–≥ –∑–∞ —à–∞–≥–æ–º. –ö–æ–¥ –ª–µ–≥–∫–æ —Ä–∞—Å—à–∏—Ä—è–µ—Ç—Å—è: –¥–æ–±–∞–≤–ª—è–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ—Å—Ç–æ–≤, –∫–Ω–æ–ø–∫–∏, –±–∞–ª–ª—ã, –∂–∞–ª–æ–±—ã –∏ —Ç.–¥. –í—Å–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (Google Sheets) ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ª–∏—Å—Ç—ã, –∫–∞–∫ –æ–±—Å—É–∂–¥–∞–ª–∏.

‚Ä¢ –î–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –ø–æ—Å—Ç–æ–≤: –±–æ—Ç –ø—É–±–ª–∏–∫—É–µ—Ç –æ–±—ä–µ–∫—Ç—ã —Ç–æ–ª—å–∫–æ —Å–∞–º (–±–µ–∑ –∫–Ω–æ–ø–æ–∫ forward/reply), –º–æ–∂–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫—É, –¥–µ–ª–∞—è —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º—ã–º–∏.
‚Ä¢ –î–ª—è Google Sheets ‚Äî –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ gspread.
‚Ä¢ –î–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ, FSM, –º—É–ª—å—Ç–∏—à–∞–≥–æ–≤—ã—Ö —Ñ–æ—Ä–º ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º aiogram FSMContext (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è, –¥–æ–±–∞–≤–ª—é –ø—Ä–∏–º–µ—Ä –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É).
‚Ä¢ –î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (–ø–æ —Å—Å—ã–ª–∫–µ –Ω–∞ –∫–∞–Ω–∞–ª).
‚Ä¢ –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è —Ñ–∏–∫—Å–∏—Ä—É—é—Ç—Å—è (–±–∞–ª–ª—ã, –∂–∞–ª–æ–±—ã, –∏—Å—Ç–æ—Ä–∏–∏).
"""
# === OLD BLOCK (–ø–µ—Ä–µ–Ω–µ—Å—ë–Ω 2025-06-08) ===



# === OLD BLOCK (–ø–µ—Ä–µ–Ω–µ—Å—ë–Ω 2025-06-08) ===


