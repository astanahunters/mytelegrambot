# –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ Telegram Real Estate Bot (–¥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ¬´–ï—Å–ª–∏ –≤—Å—ë —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏¬ª)
# –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–æ–≥–æ —á–∞—Ç–∞ –∏ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞, –≥–æ—Ç–æ–≤–∞—è –∫ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—é
# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Sheets, –±–∞–ª–ª—ã, –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, –∂–∞–ª–æ–±—ã, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è

# main.py
import os
import sys
import logging
import asyncio
from datetime import datetime
from pathlib import Path
import contextlib

from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart, Command
from aiogram.types import (
    Message, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

import gspread
from google.oauth2.service_account import Credentials

# --- auto_cleaner integration ---
import auto_cleaner

# --- 1. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
PROJECT_DIR       = Path(__file__).resolve().parent
MAIN_FILE         = PROJECT_DIR / "main.py"
CHANGELOG         = PROJECT_DIR / "changelog.md"
BACKUP_DIR        = PROJECT_DIR / "backups"
BACKUP_DIR.mkdir(exist_ok=True)

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s'
)
logger = logging.getLogger(__name__)

# ENV loader
def require_env(name: str) -> str:
    value = os.getenv(name)
    if not value:
        logger.error(f"Environment variable '{name}' is not set or empty.")
        sys.exit(1)
    return value

# –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN              = require_env('BOT_TOKEN')
GOOGLE_CREDENTIALS = require_env('GOOGLE_CREDENTIALS')
SPREADSHEET_NAME   = require_env('SPREADSHEET_NAME')

# –ß–∞—Ç—ã –∏ –∞–¥–º–∏–Ω
DEFAULT_PRIVATE_CHAT_ID = -1002635314764
DEFAULT_CHANNEL_ID      = -1002643399672
DEFAULT_YOUR_ADMIN_ID   = 7796929428
PRIVATE_CHAT_ID = int(os.getenv('PRIVATE_CHAT_ID', str(DEFAULT_PRIVATE_CHAT_ID)))
CHANNEL_ID      = int(os.getenv('CHANNEL_ID', str(DEFAULT_CHANNEL_ID)))
YOUR_ADMIN_ID   = int(os.getenv('YOUR_ADMIN_ID', str(DEFAULT_YOUR_ADMIN_ID)))
CONFIRM_TIMEOUT = int(os.getenv('CONFIRM_TIMEOUT', '3600'))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())

# --- 2. Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ ---
SCOPES = [
    'https://www.googleapis.com/auth/spreadsheets',
    'https://www.googleapis.com/auth/drive'
]
try:
    creds = Credentials.from_service_account_file(GOOGLE_CREDENTIALS, scopes=SCOPES)
    gc = gspread.authorize(creds)
    sh = gc.open(SPREADSHEET_NAME)
    users_ws      = sh.worksheet('users')
    posts_ws      = sh.worksheet('posts')
    complaints_ws = sh.worksheet('complaints')
    score_ws      = sh.worksheet('score_history')
    leads_ws      = sh.worksheet('leads')
    logger.info('‚úÖ Google Sheet –æ—Ç–∫—Ä—ã—Ç!')
except Exception as e:
    logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google Sheets: %s', e)
    sys.exit(1)

# --- 3. –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets ---
def get_user_by_id(user_id: int):
    for rec in users_ws.get_all_records():
        if str(rec.get('ID')) == str(user_id):
            return rec
    return None


def get_col_idx_by_name(ws, col_name: str):
    headers = ws.row_values(1)
    for idx, name in enumerate(headers, start=1):
        if name.strip().lower() == col_name.strip().lower():
            return idx
    return None


def update_user_score(user_id: int, delta: int, reason: str):
    records = users_ws.get_all_records()
    for row_idx, rec in enumerate(records, start=2):
        if str(rec.get('ID')) == str(user_id):
            col_bal = get_col_idx_by_name(users_ws, '–±–∞–ª–ª—ã')
            new = int(rec.get('–±–∞–ª–ª—ã', 0)) + delta
            users_ws.update_cell(row_idx, col_bal, new)
            score_ws.append_row([
                user_id, reason, delta,
                datetime.utcnow().isoformat(), 'auto'
            ])
            return new
    return None

async def auto_invite_verified_users():
    records = users_ws.get_all_records()
    col_invited = get_col_idx_by_name(users_ws, 'invited')
    for row_idx, rec in enumerate(records, start=2):
        status = (rec.get('—Å—Ç–∞—Ç—É—Å') or '').strip().lower()
        invited = (rec.get('invited') or '').strip().lower()
        if status == 'verified' and invited != 'yes':
            link = await bot.create_chat_invite_link(chat_id=PRIVATE_CHAT_ID, member_limit=1)
            await bot.send_message(rec['ID'],
                f"‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞! –í—Å—Ç—É–ø–∞–π—Ç–µ: {link.invite_link}"
            )
            users_ws.update_cell(row_idx, col_invited, 'yes')

# --- 4. FSM –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π ---
class PostStates(StatesGroup):
    waiting_photo = State()
    waiting_desc  = State()

# --- 5. –•–µ–ª–ø–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –õ–° ---
def is_private(m: Message) -> bool:
    return m.chat.type == 'private'

# --- 6. –•–µ–Ω–¥–ª–µ—Ä—ã ---
@dp.message(CommandStart())
async def start_cmd(message: Message):
    if not is_private(message):
        return
    user = get_user_by_id(message.from_user.id)
    if user and user.get('—Å—Ç–∞—Ç—É—Å', '').strip().lower() == 'verified':
        link = await bot.create_chat_invite_link(chat_id=PRIVATE_CHAT_ID, member_limit=1)
        await message.answer("‚úÖ –í—ã –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã! " + link.invite_link)
    elif user:
        await message.answer("–ñ–¥–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.")
    else:
        kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton("üì≤ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
            reply_markup=kb
        )

@dp.message(F.content_type == 'contact')
async def process_contact(message: Message):
    if not is_private(message):
        return
    c = message.contact
    fio = f"{c.first_name or ''} {c.last_name or ''}".strip()
    users_ws.append_row([
        c.user_id, fio, c.phone_number,
        'waiting', 0, datetime.utcnow().isoformat(),
        '', 'no', 'no'
    ])
    await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à –Ω–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.")

@dp.message(Command('rules'))
async def send_rules(message: Message):
    if not is_private(message):
        return await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ –õ–°.")
    kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚úÖ –û–∑–Ω–∞–∫–æ–º–∏–ª—Å—è", callback_data="accept_rules")
    )
    await message.answer("üìú –ü—Ä–∞–≤–∏–ª–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞...", reply_markup=kb)

@dp.callback_query(F.data == "accept_rules")
async def accept_rules(cb: types.CallbackQuery):
    await cb.message.edit_reply_markup(None)
    link = await bot.create_chat_invite_link(chat_id=PRIVATE_CHAT_ID, member_limit=1)
    row_idx = users_ws.find(str(cb.from_user.id)).row
    col_read = get_col_idx_by_name(users_ws, '–û–∑–Ω–∞–∫–æ–º–∏–ª—Å—è')
    col_inv  = get_col_idx_by_name(users_ws, 'invited')
    users_ws.update_cell(row_idx, col_read, 'yes')
    users_ws.update_cell(row_idx, col_inv,  'yes')
    await cb.message.answer(f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! {link.invite_link}")

@dp.message(F.chat.id == PRIVATE_CHAT_ID)
async def delete_in_private_chat(msg: Message):
    with contextlib.suppress(Exception):
        await msg.delete()

@dp.message(Command('newpost'))
async def cmd_newpost(message: Message, state: FSMContext):
    if not is_private(message): return
    user = get_user_by_id(message.from_user.id)
    if not user or user.get('—Å—Ç–∞—Ç—É—Å', '').strip().lower() != 'verified':
        return await message.answer("–ü—É–±–ª–∏–∫–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º.")
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –æ–±—ä–µ–∫—Ç–∞.")
    await state.set_state(PostStates.waiting_photo)

@dp.message(PostStates.waiting_photo, F.photo)
async def got_photo(message: Message, state: FSMContext):
    await state.update_data(photo=message.photo[-1].file_id)
    await message.answer("–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
    await state.set_state(PostStates.waiting_desc)

@dp.message(PostStates.waiting_desc)
async def got_desc(message: Message, state: FSMContext):
    data = await state.get_data()
    await bot.send_photo(chat_id=CHANNEL_ID, photo=data['photo'], caption=message.text)
    posts_ws.append_row([message.from_user.id, message.text, datetime.utcnow().isoformat()])
    update_user_score(message.from_user.id, +10, 'post')
    await message.answer("‚úÖ –û–±—ä–µ–∫—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.")
    await state.clear()

@dp.message(Command('cabinet'))
async def show_cabinet(message: Message):
    if not is_private(message):
        return await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ –õ–°.")
    user = get_user_by_id(message.from_user.id)
    if not user:
        return await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
    bal = user.get('–±–∞–ª–ª—ã', 0)
    status = user.get('—Å—Ç–∞—Ç—É—Å', '')
    text = (
        f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
        f"–ë–∞–ª–ª—ã: <b>{bal}</b>\n"
        f"–°—Ç–∞—Ç—É—Å: {status}\n"
    )
    await message.answer(text)

@dp.message(Command('approve'))
async def approve_user(message: Message):
    if not is_private(message): return
    if message.from_user.id != YOUR_ADMIN_ID:
        return await message.answer("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    parts = message.text.split()
    if len(parts) != 2 or not parts[1].isdigit():
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /approve <ID>")
    uid = int(parts[1])
    row_idx = users_ws.find(str(uid)).row
    col_status  = get_col_idx_by_name(users_ws, '—Å—Ç–∞—Ç—É—Å')
    col_invited = get_col_idx_by_name(users_ws, 'invited')
    users_ws.update_cell(row_idx, col_status, 'verified')
    link = await bot.create_chat_invite_link(chat_id=PRIVATE_CHAT_ID, member_limit=1)
    users_ws.update_cell(row_idx, col_invited, 'yes')
    await bot.send_message(uid, f"‚úÖ –í—ã –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã! {link.invite_link}")
    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –ø—Ä–∏–≥–ª–∞—à—ë–Ω.")

@dp.message(Command('autoinvite'))
async def autoinvite_command(message: Message):
    if not is_private(message): return
    if message.from_user.id != YOUR_ADMIN_ID:
        return await message.answer("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    await auto_invite_verified_users()
    await message.answer("‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —Ä–∞–∑–æ—Å–ª–∞–Ω—ã.")

@dp.message(Command('clean'))
async def clean_cmd(message: Message):
    if message.from_user.id != YOUR_ADMIN_ID:
        return
    await message.answer("–ó–∞–ø—É—Å–∫–∞—é –∞–≤—Ç–æ-—á–∏—Å—Ç–∫—É...")
    await auto_cleaner.main()
    await message.answer("‚úÖ Auto-cleaner –∑–∞–≤–µ—Ä—à—ë–Ω.")

# --- 7. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == '__main__':
    logger.info("üöÄ Bot started")
    asyncio.run(dp.start_polling(bot))



"""
–í–ê–ñ–ù–û: –≠—Ç–æ skeleton ‚Äî –æ—Å–Ω–æ–≤–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã. –í—Å–µ –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–∞ –∏ —Å–ª–æ–∂–Ω—ã–µ FSM-–º–µ—Ö–∞–Ω–∏–∫–∏ –º–æ–∂–Ω–æ –Ω–∞—Ä–∞—â–∏–≤–∞—Ç—å —à–∞–≥ –∑–∞ —à–∞–≥–æ–º. –ö–æ–¥ –ª–µ–≥–∫–æ —Ä–∞—Å—à–∏—Ä—è–µ—Ç—Å—è: –¥–æ–±–∞–≤–ª—è–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ—Å—Ç–æ–≤, –∫–Ω–æ–ø–∫–∏, –±–∞–ª–ª—ã, –∂–∞–ª–æ–±—ã –∏ —Ç.–¥. –í—Å–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (Google Sheets) ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ª–∏—Å—Ç—ã, –∫–∞–∫ –æ–±—Å—É–∂–¥–∞–ª–∏.

‚Ä¢ –î–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –ø–æ—Å—Ç–æ–≤: –±–æ—Ç –ø—É–±–ª–∏–∫—É–µ—Ç –æ–±—ä–µ–∫—Ç—ã —Ç–æ–ª—å–∫–æ —Å–∞–º (–±–µ–∑ –∫–Ω–æ–ø–æ–∫ forward/reply), –º–æ–∂–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫—É, –¥–µ–ª–∞—è —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º—ã–º–∏.
‚Ä¢ –î–ª—è Google Sheets ‚Äî –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ gspread.
‚Ä¢ –î–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ, FSM, –º—É–ª—å—Ç–∏—à–∞–≥–æ–≤—ã—Ö —Ñ–æ—Ä–º ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º aiogram FSMContext (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è, –¥–æ–±–∞–≤–ª—é –ø—Ä–∏–º–µ—Ä –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É).
‚Ä¢ –î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (–ø–æ —Å—Å—ã–ª–∫–µ –Ω–∞ –∫–∞–Ω–∞–ª).
‚Ä¢ –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è —Ñ–∏–∫—Å–∏—Ä—É—é—Ç—Å—è (–±–∞–ª–ª—ã, –∂–∞–ª–æ–±—ã, –∏—Å—Ç–æ—Ä–∏–∏).
"""
# === OLD BLOCK (–ø–µ—Ä–µ–Ω–µ—Å—ë–Ω 2025-06-08) ===



# === OLD BLOCK (–ø–µ—Ä–µ–Ω–µ—Å—ë–Ω 2025-06-08) ===


